Reference Doc : https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work

#How the web works ?

A web browser takes you anywhere on the internet. It retrieves information from other parts of the web and displays it on your desktop or mobile device. The information is transferred using the Hypertext Transfer Protocol, which defines how text, images and video are transmitted on the web.


#Browser's high level structure includes:

1.The user interface: this includes the address bar, back/forward button, bookmarking menu, etc. Every part of the browser display except the window where you see the requested page.

2.The browser engine: marshals actions between the UI and the rendering engine.

3.The rendering engine: responsible for displaying requested content. For example if the requested content is HTML, the rendering engine parses HTML and CSS, 
and displays the parsed content on the screen.

4.Networking: for network calls such as HTTP requests, using different implementations for different platform behind a platform-independent interface.

5.UI backend: used for drawing basic widgets like combo boxes and windows. This backend exposes a generic interface that is not platform specific. 
Underneath it uses operating system user interface methods.

6.JavaScript interpreter: Used to parse and execute JavaScript code.

7.Data storage: This is a persistence layer. The browser may need to save all sorts of data locally, such as cookies. Browsers also support storage mechanisms such as localStorage, IndexedDB, WebSQL and FileSystem.


#Rendering engine and its use:

Rendering steps include style, layout, paint and, in some cases, compositing. 
The CSSOM and DOM trees created in the parsing step are combined into a render tree which is then used to compute the layout of every visible element, 
which is then painted to the screen. In some cases, content can be promoted to their own layers and composited, 
improving performance by painting portions of the screen on the GPU instead of the CPU, freeing up the main thread.

# Prasers :

Once the browser receives the first chunk of data, it can begin parsing the information received. 
Parsing is the step the browser takes to turn the data it receives over the network into the DOM and CSSOM, which is used by the renderer to paint a page to the screen.

The DOM is the internal representation of the markup for the browser. The DOM is also exposed, and can be manipulated through various APIs in JavaScript.

Even if the request page's HTML is larger than the initial 14KB packet, the browser will begin parsing and attempting to render an experience based on the data it has. 
This is why it's important for web performance optimization to include everything the browser needs to start rendering a page, 
or at least a template of the page - the CSS and HTML needed for the first render â€” in the first 14 kilobytes. 
But before anything is rendered to the screen, the HTML, CSS, and JavaScript have to be parsed.

#Layout & Painting :

Layout :

The fourth step in the critical rendering path is running layout on the render tree to compute the geometry of each node. 
Layout is the process by which the width, height, and location of all the nodes in the render tree are determined, 
plus the determination of the size and position of each object on the page. 
Reflow is any subsequent size and position determination of any part of the page or the entire document.

Paint :

The last step in the critical rendering path is painting the individual nodes to the screen, 
the first occurrence of which is called the first meaningful paint. In the painting or rasterization phase, 
the browser converts each box calculated in the layout phase to actual pixels on the screen. 
Painting involves drawing every visual part of an element to the screen, including text, colors, borders, shadows, and replaced elements like buttons and images. 
The browser needs to do this super quickly.



